{"name":"atom-lint","main":"./lib/atom-lint","version":"0.20.1","private":true,"description":"Generic code linting support, including RuboCop, flake8, JSHint, CoffeeLint, etc.","repository":{"type":"git","url":"https://github.com/yujinakayama/atom-lint"},"license":"MIT","engines":{"atom":">=0.165.0"},"dependencies":{"fs-plus":"^2.0.4","season":"^1.0.2","emissary":"^1.0.0","lodash":"^2.4.1","minimatch":"^0.2.14","color":"^0.5.0","xml2js":"^0.4.1"},"devDependencies":{"coffee-script":"latest","coffeelint":"latest","temp":"^0.7.0","rimraf":"^2.2.8"},"readme":"[![Build Status](https://travis-ci.org/yujinakayama/atom-lint.svg?branch=master)](https://travis-ci.org/yujinakayama/atom-lint)\n\n# Atom-Lint\n\nGeneric code linting support for [Atom](https://atom.io).\n\n![Screenshot](https://cloud.githubusercontent.com/assets/83656/2719884/196c7e02-c568-11e3-8455-4ee4ba095752.png)\n\n## Supported Linters\n\nMore linters will be supported in the future.\n* [RuboCop](https://github.com/bbatsov/rubocop) for Ruby\n* [flake8](https://flake8.readthedocs.org/) for Python\n* [HLint](http://community.haskell.org/~ndm/hlint/) for Haskell\n  (Installation of [language-haskell](https://atom.io/packages/language-haskell) package is required)\n* [JSHint](http://www.jshint.com/docs/) for JavaScript\n* [CoffeeLint](http://www.coffeelint.org/) for CoffeeScript\n* [gc](http://golang.org/cmd/gc/) for Go\n* [CSSLint](https://github.com/stubbornella/csslint) for CSS\n* [SCSS-Lint](https://github.com/causes/scss-lint) for SCSS\n* [puppet-lint](http://puppet-lint.com) for Puppet\n  (Installation of [language-puppet](https://atom.io/packages/language-puppet) package is required)\n* [ShellCheck](https://github.com/koalaman/shellcheck) for shell script\n* [Clang](http://clang.llvm.org) for C/C++/Objective-C\n* [rustc](http://www.rust-lang.org/) for Rust\n  (Installation of [language-rust](https://atom.io/packages/language-rust) package is required)\n* [erlc](http://erlang.org/doc/man/erlc.html) for Erlang\n  (Installation of [language-erlang](https://atom.io/packages/language-erlang) package is required)\n\n## Features\n\n* Seamless integration with Atom as if it's a built-in package.\n* Code highlighting – you don't need to move your eyes from the code to see the violations.\n* Clean UI – it honors the colors of your favorite Atom theme.\n\n## Installation\n\n```bash\n$ apm install atom-lint\n```\n\nIf the current Atom has been launched via GUI (e.g. Dock/Finder on OS X),\nonce quit and re-launch it from your shell with the `atom` command.\nThis is required only once and important to handle the `PATH` environment variable properly.\nSee [Linter Executable Paths](#linter-executable-paths) for more details.\n\n## Usage\n\nYour source will be linted on open and on save automatically.\nThe detected violations will be displayed as arrows in the editor.\nYou can see the detail of the violation by moving the cursor to it.\n\n## Keymaps\n\n* `Ctrl-Alt-L`: Global toggle\n* `Ctrl-Alt-[`: Move to Previous Violation\n* `Ctrl-Alt-]`: Move to Next Violation\n* `Ctrl-Alt-M`: Toggle Violation Metadata (toggle configuration `atom-lint.showViolationMetadata`)\n\nAlso you can customize keymaps by editing `~/.atom/keymap.cson` (choose **Open Your Keymap** in **Atom** menu):\n\n```coffeescript\n'.workspace':\n  'ctrl-alt-l': 'lint:toggle'\n  'ctrl-alt-m': 'lint:toggle-violation-metadata'\n'.editor':\n  'ctrl-alt-[': 'lint:move-to-previous-violation'\n  'ctrl-alt-]': 'lint:move-to-next-violation'\n```\n\nSee [Customizing Atom](https://atom.io/docs/latest/customizing-atom#customizing-key-bindings) for more details.\n\n## Configuration\n\nYou can configure Atom-Lint by editing `~/.atom/config.cson` (choose **Open Your Config** in **Atom** menu):\n\n```coffeescript\n# Some other settings...\n'atom-lint':\n  'ignoredNames': [\n    'tmp/**'\n  ]\n  'showViolationMetadata': true\n  'clang':\n    'path': '/path/to/bin/clang'\n    'headerSearchPaths': ['/path/to/include','/path2/to/include']\n    'mergeAtomLintConfigIntoAutoDiscoveredFlags': true # If you want to add defaults to discovered project-specific clang flags\n  'coffeelint':\n    'path': '/path/to/bin/coffeelint'\n  'csslint':\n    'path': '/path/to/bin/csslint'\n    'rules': # See http://csslint.net/about.html for rules\n      'ignore': [\n        'adjoining-classes'\n      ]\n      'errors': []\n      'warnings': []\n  'erlc':\n    'path': '/path/to/bin/erlc'\n  'flake8':\n    'path': '/path/to/bin/flake8'\n    'configPath': '/path/to/your/config' # Passed to flake 8 via --config option\n  'gc':\n    'path': '/path/to/bin/go'\n  'hlint':\n    'path': '/path/to/bin/hlint'\n  'jshint':\n    'path': '/path/to/bin/jshint'\n  'puppet-lint':\n    'path': '/path/to/bin/puppet-lint'\n  'rubocop':\n    'path': '/path/to/bin/rubocop'\n  'rustc':\n    'path': '/path/to/bin/rustc'\n  'scss-lint':\n    'path': '/path/to/bin/scss-lint'\n  'shellcheck':\n    'path': '/path/to/bin/shellcheck'\n```\n\n### Linter Executable Paths\n\n* `atom-lint.LINTER.path`\n\nNormally you can omit this setting.\n\nThere's an issue that\nenvironment variables in Atom varies depending on whether it's launched via shell or GUI.\nIf it's launched via GUI, it cannot get the environment variables set in your shell rc files like `PATH`.\nTo handle this issue,\nwhen Atom is launched via shell, Atom-Lint automatically saves the environment variables,\nand from then on it will use the saved variables on linter invocation even if Atom is launched via GUI.\n\nIf you're using a language version manager such as [rbenv](https://github.com/sstephenson/rbenv),\nlinters need be installed in the default/global environment of the version manager\n(i.e. the environment where you opened a new terminal).\nIf you need to use a non-default executable, use this setting.\n\n### File Patterns to Ignore\n\n* `atom-lint.ignoredNames` (Global)\n* `atom-lint.LINTER.ignoredNames` (Per Linter)\n\nYou can specify lists of file patterns to disable linting.\nThe global patterns and the per linter patterns will be merged on evaluation\nso that you can make these lists DRY.\n\n```coffeescript\n'atom-lint':\n  'ignoredNames': [\n    'tmp/**'\n  ]\n  'rubocop':\n    'ignoredNames': [\n      'vendor/**'\n      'db/schema.rb'\n    ]\n```\n\nWith the above example, all of `tmp/**`, `vendor/**` and `db/schema.db` are ignored when RuboCop is active.\n\nThe pattern must be relative to the project root directory.\nThe pattern format is basically the same as the shell expansion and `.gitignore`.\nSee [`minimatch`](https://github.com/isaacs/minimatch) for more details.\n\n### Clang Specific Configuration\n\n#### Header Search Paths\n\n* `atom-lint.clang.headerSearchPaths`\n\nSpecify additional header search paths. These paths are passed to `clang` with `-I` option.\n\n#### Project-Specific Flags and Atom-Lint's configuration\n\n**This feature is temporarily disabled now.**\n\n* `atom-lint.clang.mergeAtomLintConfigIntoAutoDiscoveredFlags`\n\nAtom-Lint automatically picks up your project-specific compiler flags\n(currenly [`.clang-complete` format](https://github.com/Rip-Rip/clang_complete/blob/master/doc/clang_complete.txt) is supported)\nvia [`clang-flags`](https://github.com/Kev/clang-flags) module.\nBy default, if a custom flag file is found, Atom-Lint uses only the flags specified in the file\nand ignores other configuration (e.g. the `headerSearchPaths` above).\nIf you want to use both the project-specific flags and Atom-Lint's configuration,\nset this `mergeAtomLintConfigIntoAutoDiscoveredFlags` to `true`.\n\n### CSSLint Specific Configuration\n\n#### Custom Rules\n\n* `atom-lint.csslint.rules.errors`\n* `atom-lint.csslint.rules.warnings`\n* `atom-lint.csslint.rules.ignore`\n\nThese are passed to `csslint` with [`--errors`, `--warnings` or `--ignore` option](https://github.com/CSSLint/csslint/wiki/Command-line-interface#options).\n\n## Contributors\n\nHere's a [list](https://github.com/yujinakayama/atom-lint/graphs/contributors) of all contributors to Atom-Lint.\n\n## Changelog\n\nAtom-Lint's changelog is available [here](https://github.com/yujinakayama/atom-lint/blob/master/CHANGELOG.md).\n\n## License\n\nCopyright (c) 2014 Yuji Nakayama\n\nSee the [LICENSE.txt](https://github.com/yujinakayama/atom-lint/blob/master/LICENSE.txt) for details.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/yujinakayama/atom-lint/issues"},"homepage":"https://github.com/yujinakayama/atom-lint","_id":"atom-lint@0.20.1","_shasum":"7b5bd02dec32e26a005179838b6f7d7932873586","_resolved":"file:../d-11561-13789-15yx63r/package.tgz","_from":"../d-11561-13789-15yx63r/package.tgz"}