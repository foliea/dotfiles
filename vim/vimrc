" Plugins
let g:fzf_install = 'yes | ./install --bin'

call plug#begin('~/.vim/plugins')

Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'scrooloose/syntastic'
Plug 'moll/vim-node'
Plug 'elzr/vim-json'
Plug 'scrooloose/nerdcommenter'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mustache/vim-mustache-handlebars'
Plug 'jelera/vim-javascript-syntax'
Plug 'jremmen/vim-ripgrep'
Plug 'janko-m/vim-test'
Plug 'jgdavey/tslime.vim'
Plug 'junegunn/fzf', { 'do': g:fzf_install }
Plug 'elixir-lang/vim-elixir'
Plug 'pbrisbin/vim-mkdir'
Plug 'tpope/vim-fugitive'
Plug 'ngmy/vim-rubocop'
Plug 'vim-ruby/vim-ruby'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-system-copy'

call plug#end()

" Editor options
colorscheme Tomorrow-Night

set background=dark
set guioptions-=r
set guioptions-=L
set relativenumber
set number
set ruler

" Temp files
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set undodir=~/.vim/tmp/undo//

set softtabstop=4
set shiftwidth=4
set expandtab

" Backspace MacOS Sierra
set backspace=indent,eol,start

" Tabs
autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2
autocmd FileType eruby setlocal shiftwidth=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 softtabstop=2
autocmd FileType scss setlocal shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2
autocmd FileType html.handlebars setlocal shiftwidth=2 softtabstop=2

" Show whitespaces
set list

" Leader key
let mapleader=","

" Search
set hlsearch

" Options
set nocompatible      " We're running Vim, not Vi!
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" NERDTree
nmap <F8> :NERDTreeToggle<CR>

let g:NERDTreeShowHidden=1
let g:NERDTreeIgnore = ['\.DS_Store$', '\$']
let g:NERDTreeHijackNetrw=0

" Go
let g:go_disable_autoinstall = 1
let g:go_fmt_fail_silently = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Ruby
autocmd FileType ruby compiler ruby

" Custom syntax highlighting
autocmd BufRead,BufNewFile Gomfile setlocal ft=ruby
autocmd BufRead,BufNewFile Caskfile setlocal ft=ruby
autocmd BufRead,BufNewFile *.es6 set filetype=javascript
autocmd BufRead,BufReadPost *.md set filetype=markdown
autocmd BufRead,BufNewFile *.docker set filetype=dockerfile

" Remove trailing whitespaces on save
set wrap
set linebreak
set showbreak=>\ \ \
autocmd BufWritePre * :%s/\s\+$//e

" Tagbar
nmap <F9> :TagbarToggle<CR>

" Split panes
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

nnoremap <leader>q <C-W>_
nmap <leader>w :resize 10<CR>

" Fuzzy finder
nmap <C-P> :FZF<CR>

" Ripgrep
nmap <C-F> :Rg<space>

" Tests
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>f :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>v :TestVisit<CR>

let test#strategy = "tslime"

" Quickfix list
nmap <leader>e :cwindow<CR>

" Tmux command
nmap <silent> <leader>c :Tmux<space>

" Shell
set shell=/bin/bash

" Fix display
set t_ut=

" Tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1

" Disable arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

" Markdown Preview
function! Preview_Markdown()
  let s:preview_cmd = 'grip ' . resolve(expand('%:p')) . ' 0.0.0.0'

  call Send_keys_to_Tmux('c-c')
  call Send_to_Tmux(s:preview_cmd)
  call Send_keys_to_Tmux('Enter')
endfunction

noremap <C-M> :call Preview_Markdown()<CR>
